const { DataTypes } = require("sequelize");
const { sequelize } = require("../config/db");
const ExamPart = require("./examPart");
const Exam = require("./exam");

const Question = sequelize.define("Question", {
    id: { type: DataTypes.INTEGER, autoIncrement: true, primaryKey: true },
    part_id: {
        type: DataTypes.INTEGER,
        allowNull: false,
        references: { model: ExamPart, key: "id" },
        onDelete: "CASCADE"
    },
    exam_id: {
        type: DataTypes.INTEGER,
        allowNull: false,  // Kh√¥ng th·ªÉ null v√¨ m·ªói c√¢u h·ªèi s·∫Ω li√™n k·∫øt v·ªõi m·ªôt b√†i thi
        references: { model: "exams", key: "id" },
        onDelete: "CASCADE"
    },
    question_text: { type: DataTypes.TEXT, allowNull: false },
    option_a: { type: DataTypes.TEXT, allowNull: false },
    option_b: { type: DataTypes.TEXT, allowNull: false },
    option_c: { type: DataTypes.TEXT, allowNull: false },
    option_d: { type: DataTypes.TEXT, allowNull: true },
    correct_answer: {
        type: DataTypes.ENUM("A", "B", "C", "D"),
        allowNull: false
    },
    image_filename: { type: DataTypes.STRING(255), allowNull: true }, // üÜï H·ªó tr·ª£ ·∫£nh
    order: {  // Th√™m tr∆∞·ªùng order ƒë·ªÉ l∆∞u th·ª© t·ª± c√¢u h·ªèi
        type: DataTypes.INTEGER,
        allowNull: true,
    }
}, {
    tableName: "questions",
    timestamps: false
});

// üü¢ Thi·∫øt l·∫≠p quan h·ªá
ExamPart.hasMany(Question, { foreignKey: "part_id" });
Question.belongsTo(ExamPart, { foreignKey: "part_id" });

// Thi·∫øt l·∫≠p quan h·ªá gi·ªØa Question v√† Exam
Exam.hasMany(Question, { foreignKey: "exam_id" });
Question.belongsTo(Exam, { foreignKey: "exam_id" });

module.exports = Question;
