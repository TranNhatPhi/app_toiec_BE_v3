const ExamResult = require("../models/examResults");
const User = require("../models/user");
const Exam = require("../models/exam");
const Detail = require("../models/detail");
const Question = require("../models/question");

const ExamResultService = {
    // üü¢ L·∫•y t·∫•t c·∫£ k·∫øt qu·∫£ b√†i thi
    async getAllExamResults() {
        try {
            return await ExamResult.findAll();
        } catch (error) {
            console.error("‚ùå L·ªói khi l·∫•y danh s√°ch k·∫øt qu·∫£ b√†i thi:", error);
            throw new Error("Kh√¥ng th·ªÉ l·∫•y danh s√°ch k·∫øt qu·∫£ b√†i thi");
        }
    },

    // üü¢ L·∫•y k·∫øt qu·∫£ b√†i thi theo ID
    async getExamResultById(resultId) {
        try {
            return await ExamResult.findByPk(resultId);
        } catch (error) {
            console.error("‚ùå L·ªói khi l·∫•y k·∫øt qu·∫£ b√†i thi:", error);
            throw new Error("Kh√¥ng th·ªÉ l·∫•y k·∫øt qu·∫£ b√†i thi");
        }
    },

    // üü¢ L·∫•y t·∫•t c·∫£ k·∫øt qu·∫£ c·ªßa m·ªôt ng∆∞·ªùi d√πng
    async getExamResultsByUserId(userId) {
        try {
            return await ExamResult.findAll({ where: { user_id: userId } });
        } catch (error) {
            console.error("‚ùå L·ªói khi l·∫•y k·∫øt qu·∫£ b√†i thi c·ªßa user:", error);
            throw new Error("Kh√¥ng th·ªÉ l·∫•y k·∫øt qu·∫£ b√†i thi c·ªßa user");
        }
    },

    // üü¢ T·∫°o k·∫øt qu·∫£ b√†i thi (n·∫øu ch∆∞a c√≥)
    async createExamResult(data) {
        try {
            return await ExamResult.create(data);
        } catch (error) {
            console.error("‚ùå L·ªói khi t·∫°o k·∫øt qu·∫£ b√†i thi:", error);
            throw new Error("Kh√¥ng th·ªÉ t·∫°o k·∫øt qu·∫£ b√†i thi");
        }
    },

    // üî• **N·ªôp b√†i thi v√† t√≠nh to√°n ƒëi·ªÉm s·ªë**
    async submitExamAnswers(user_id, exam_id, answers, completedTime) {
        try {
            // üîπ Ki·ªÉm tra d·ªØ li·ªáu h·ª£p l·ªá
            if (!user_id || !exam_id || !answers || !Array.isArray(answers)) {
                throw new Error("D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá!");
            }

            // üîπ Ki·ªÉm tra xem user_id v√† exam_id c√≥ h·ª£p l·ªá kh√¥ng
            const userExists = await User.findByPk(user_id);
            if (!userExists) {
                throw new Error(`User ID ${user_id} kh√¥ng t·ªìn t·∫°i!`);
            }

            const examExists = await Exam.findByPk(exam_id);
            if (!examExists) {
                throw new Error(`Exam ID ${exam_id} kh√¥ng t·ªìn t·∫°i!`);
            }

            // üîπ Ki·ªÉm tra xem k·∫øt qu·∫£ b√†i thi ƒë√£ t·ªìn t·∫°i ch∆∞a
            let examResult = await ExamResult.findOne({
                where: { user_id, exam_id }
            });

            if (!examResult) {
                examResult = await ExamResult.create({
                    user_id,
                    exam_id,
                    score: 0,
                    correct_answers: 0,
                    wrong_answers: 0,
                    unanswered_questions: 0,
                    total_questions: answers.length,
                    completed_time: completedTime,
                    status: "IN_PROGRESS"
                });
            }

            let correctCount = 0;
            let wrongCount = 0;
            let unansweredCount = 0;
            let totalScore = 0;

            for (const answer of answers) {
                const { question_id, selected_answer } = answer;
                const question = await Question.findByPk(question_id);
                if (!question) continue;

                const isCorrect = selected_answer && selected_answer === question.correct_answer;

                await Detail.create({
                    exam_result_id: examResult.id,
                    question_id,
                    selected_answer,
                    correct_answer: question.correct_answer,
                    score: isCorrect ? 5 : 0
                });

                if (!selected_answer) {
                    unansweredCount++;
                } else if (isCorrect) {
                    correctCount++;
                    totalScore += 5; // ‚úÖ TOEIC: M·ªói c√¢u ƒë√∫ng 5 ƒëi·ªÉm
                } else {
                    wrongCount++;
                }
            }

            // üîπ C·∫≠p nh·∫≠t k·∫øt qu·∫£ b√†i thi
            await ExamResult.update(
                {
                    correct_answers: correctCount,
                    wrong_answers: wrongCount,
                    unanswered_questions: unansweredCount,
                    score: totalScore,
                    completed_time: completedTime,
                    status: "COMPLETED",
                    completed_at: new Date()
                },
                { where: { id: examResult.id } }
            );

            return {
                message: "N·ªôp b√†i th√†nh c√¥ng!",
                correct_answers: correctCount,
                wrong_answers: wrongCount,
                unanswered_questions: unansweredCount,  
                total_score: totalScore,
                completed_time: completedTime,
                completed_at: Date.now()
            };
        } catch (error) {
            console.error("‚ùå L·ªói khi x·ª≠ l√Ω b√†i thi:", error);
            throw new Error(error.message || "L·ªói h·ªá th·ªëng khi n·ªôp b√†i!");
        }
    },

    // üü¢ Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    validateData(data) {
        if (!data.user_id || !data.exam_id) {
            throw new Error("Thi·∫øu user_id ho·∫∑c exam_id");
        }

        if (data.correct_answers < 0 || data.wrong_answers < 0 || data.unanswered_questions < 0) {
            throw new Error("S·ªë c√¢u tr·∫£ l·ªùi kh√¥ng th·ªÉ l√† s·ªë √¢m");
        }

        if (data.score < 0 || data.score > 990) {
            throw new Error("ƒêi·ªÉm s·ªë ph·∫£i t·ª´ 0 ƒë·∫øn 990");
        }

        if (data.completed_time < 0) {
            throw new Error("Th·ªùi gian ho√†n th√†nh kh√¥ng h·ª£p l·ªá!");
        }
    }
};

module.exports = ExamResultService;
