const express = require("express");
const ExamController = require("../controllers/examController");
const verifyToken = require("../middlewares/authMiddleware");
const verifyRole = require("../middlewares/roleMiddleware");

const router = express.Router();

/**
 * @swagger
 * tags:
 *   name: Exams
 *   description: Qu·∫£n l√Ω c√°c b√†i thi TOEIC
 */

/**
 * @swagger
 * /api/exams:
 *   get:
 *     summary: L·∫•y danh s√°ch t·∫•t c·∫£ c√°c b√†i thi
 *     tags: [Exams]
 *     responses:
 *       200:
 *         description: Tr·∫£ v·ªÅ danh s√°ch b√†i thi
 */
router.get("/", ExamController.getAllExams);

/**
 * @swagger
 * /api/exams/{id}:
 *   get:
 *     summary: L·∫•y th√¥ng tin b√†i thi theo ID
 *     tags: [Exams]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID c·ªßa b√†i thi c·∫ßn l·∫•y
 *     responses:
 *       200:
 *         description: Tr·∫£ v·ªÅ b√†i thi theo ID
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y b√†i thi
 */
router.get("/:id", ExamController.getExamById);

/**
 * @swagger
 * /api/exams/{id}/questions:
 *   get:
 *     summary: L·∫•y danh s√°ch c√¢u h·ªèi c·ªßa b√†i thi v·ªõi ph·∫ßn v√† c√¢u h·ªèi
 *     tags: [Exams]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID c·ªßa b√†i thi c·∫ßn l·∫•y c√¢u h·ªèi
 *     responses:
 *       200:
 *         description: Tr·∫£ v·ªÅ danh s√°ch c√¢u h·ªèi c·ªßa b√†i thi
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi ho·∫∑c b√†i thi
 */
router.get("/:id/questions", ExamController.getExamQuestions);


/**
 * @swagger
 * /api/exams/{id}/questions1:
 *   get:
 *     summary: L·∫•y danh s√°ch c√¢u h·ªèi c·ªßa b√†i thi theo t·ª´ng part (ph√¢n trang)
 *     tags: [Exams]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID c·ªßa b√†i thi
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *         description: S·ªë trang (t∆∞∆°ng ·ª©ng v·ªõi part)
 *     responses:
 *       200:
 *         description: Tr·∫£ v·ªÅ danh s√°ch c√¢u h·ªèi c·ªßa b√†i thi theo part
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi ho·∫∑c b√†i thi
 */
router.get("/:id/questions1", ExamController.getExamQuestions1);


/**
 * @swagger
 * /api/exams:
 *   post:
 *     summary: T·∫°o m·ªôt b√†i thi m·ªõi
 *     tags: [Exams]
 *     security:
 *       - BearerAuth: []  # üîê Y√™u c·∫ßu Bearer Token
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               title:
 *                 type: string
 *                 example: "TOEIC Listening Test 3"
 *               duration:
 *                 type: string
 *                 example: "45 ph√∫t"
 *               total_questions:
 *                 type: integer
 *                 example: 100
 *     responses:
 *       201:
 *         description: B√†i thi ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng
 *       400:
 *         description: D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá
 *       401:
 *         description: Ch∆∞a ƒëƒÉng nh·∫≠p (Missing JWT Token)
 */
router.post("/", verifyToken, verifyRole(1, 3), ExamController.createExam);

/**
 * @swagger
 * /api/exams/{id}:
 *   put:
 *     summary: C·∫≠p nh·∫≠t th√¥ng tin b√†i thi
 *     tags: [Exams]
 *     security:
 *       - BearerAuth: []  # üîê Y√™u c·∫ßu Bearer Token
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID c·ªßa b√†i thi c·∫ßn c·∫≠p nh·∫≠t
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               title:
 *                 type: string
 *                 example: "TOEIC Reading Test 2"
 *               duration:
 *                 type: string
 *                 example: "75 ph√∫t"
 *               total_questions:
 *                 type: integer
 *                 example: 120
 *     responses:
 *       200:
 *         description: B√†i thi ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
 *       400:
 *         description: D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y b√†i thi
 *       401:
 *         description: Ch∆∞a ƒëƒÉng nh·∫≠p (Missing JWT Token)
 */
router.put("/:id", verifyToken, ExamController.updateExam);

/**
 * @swagger
 * /api/exams/{id}:
 *   delete:
 *     summary: X√≥a b√†i thi theo ID
 *     tags: [Exams]
 *     security:
 *       - BearerAuth: []  # üîê Y√™u c·∫ßu Bearer Token
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID c·ªßa b√†i thi c·∫ßn x√≥a
 *     responses:
 *       200:
 *         description: B√†i thi ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y b√†i thi
 *       401:
 *         description: Ch∆∞a ƒëƒÉng nh·∫≠p (Missing JWT Token)
 */
router.delete("/:id", verifyToken, ExamController.deleteExam);

/**
 * @swagger
 * /api/exams/process:
 *   post:
 *     summary: X·ª≠ l√Ω b√†i thi b·∫•t ƒë·ªìng b·ªô
 *     tags: [Exams]
 *     security:
 *       - BearerAuth: []  # üîê Y√™u c·∫ßu Bearer Token
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               exam_id:
 *                 type: integer
 *                 example: 1
 *     responses:
 *       202:
 *         description: Y√™u c·∫ßu ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω
 *       400:
 *         description: D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá
 *       401:
 *         description: Ch∆∞a ƒëƒÉng nh·∫≠p (Missing JWT Token)
 */
router.post("/process", verifyToken, ExamController.processExamData);

module.exports = router;
