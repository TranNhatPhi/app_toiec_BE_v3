const express = require("express");
const ExamPartController = require("../controllers/examPartController");
const verifyToken = require("../middlewares/authMiddleware");

const router = express.Router();

/**
 * @swagger
 * tags:
 *   name: ExamParts
 *   description: Qu·∫£n l√Ω c√°c ph·∫ßn c·ªßa b√†i thi TOEIC
 */

/**
 * @swagger
 * /api/exam-parts:
 *   get:
 *     summary: L·∫•y danh s√°ch t·∫•t c·∫£ c√°c ph·∫ßn c·ªßa b√†i thi
 *     tags: [ExamParts]
 *     responses:
 *       200:
 *         description: Tr·∫£ v·ªÅ danh s√°ch ph·∫ßn thi
 */
router.get("/", ExamPartController.getAllParts);

/**
 * @swagger
 * /api/exam-parts/{id}:
 *   get:
 *     summary: L·∫•y th√¥ng tin c·ªßa m·ªôt ph·∫ßn thi theo ID
 *     tags: [ExamParts]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID c·ªßa ph·∫ßn thi c·∫ßn l·∫•y
 *     responses:
 *       200:
 *         description: Tr·∫£ v·ªÅ ph·∫ßn thi theo ID
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y ph·∫ßn thi
 */
router.get("/:id", ExamPartController.getPartById);

/**
 * @swagger
 * /api/exam-parts:
 *   post:
 *     summary: T·∫°o m·ªôt ph·∫ßn thi m·ªõi
 *     tags: [ExamParts]
 *     security:
 *       - BearerAuth: []  # üîê Y√™u c·∫ßu Bearer Token
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               exam_id:
 *                 type: integer
 *                 example: 1
 *               part_number:
 *                 type: integer
 *                 example: 3
 *               description:
 *                 type: string
 *                 example: "Reading Comprehension"
 *               total_questions:
 *                 type: integer
 *                 example: 30
 *     responses:
 *       201:
 *         description: Ph·∫ßn thi ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng
 *       400:
 *         description: D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá
 *       401:
 *         description: Ch∆∞a ƒëƒÉng nh·∫≠p (Missing JWT Token)
 */
router.post("/", verifyToken, ExamPartController.createPart);

/**
 * @swagger
 * /api/exam-parts/{id}:
 *   put:
 *     summary: C·∫≠p nh·∫≠t th√¥ng tin ph·∫ßn thi
 *     tags: [ExamParts]
 *     security:
 *       - BearerAuth: []  # üîê Y√™u c·∫ßu Bearer Token
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID c·ªßa ph·∫ßn thi c·∫ßn c·∫≠p nh·∫≠t
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               exam_id:
 *                 type: integer
 *                 example: 1
 *               part_number:
 *                 type: integer
 *                 example: 4
 *               description:
 *                 type: string
 *                 example: "Listening Section"
 *               total_questions:
 *                 type: integer
 *                 example: 40
 *     responses:
 *       200:
 *         description: Ph·∫ßn thi ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
 *       400:
 *         description: D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y ph·∫ßn thi
 *       401:
 *         description: Ch∆∞a ƒëƒÉng nh·∫≠p (Missing JWT Token)
 */
router.put("/:id", verifyToken, ExamPartController.updatePart);

/**
 * @swagger
 * /api/exam-parts/{id}:
 *   delete:
 *     summary: X√≥a ph·∫ßn thi theo ID
 *     tags: [ExamParts]
 *     security:
 *       - BearerAuth: []  # üîê Y√™u c·∫ßu Bearer Token
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID c·ªßa ph·∫ßn thi c·∫ßn x√≥a
 *     responses:
 *       200:
 *         description: Ph·∫ßn thi ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y ph·∫ßn thi
 *       401:
 *         description: Ch∆∞a ƒëƒÉng nh·∫≠p (Missing JWT Token)
 */
router.delete("/:id", verifyToken, ExamPartController.deletePart);

module.exports = router;
