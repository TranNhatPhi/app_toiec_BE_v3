const express = require("express");
const ExamResultController = require("../controllers/examResultController");
const verifyToken = require("../middlewares/authMiddleware");

const router = express.Router();

/**
 * @swagger
 * tags:
 *   name: ExamResults
 *   description: Qu·∫£n l√Ω k·∫øt qu·∫£ b√†i thi TOEIC
 */

/**
 * @swagger
 * /api/exam-results:
 *   get:
 *     summary: L·∫•y danh s√°ch t·∫•t c·∫£ k·∫øt qu·∫£ b√†i thi
 *     tags: [ExamResults]
 *     responses:
 *       200:
 *         description: Tr·∫£ v·ªÅ danh s√°ch k·∫øt qu·∫£ b√†i thi
 */
router.get("/", ExamResultController.getAllExamResults);

/**
 * @swagger
 * /api/exam-results/{id}:
 *   get:
 *     summary: L·∫•y th√¥ng tin k·∫øt qu·∫£ b√†i thi theo ID
 *     tags: [ExamResults]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID c·ªßa k·∫øt qu·∫£ b√†i thi c·∫ßn l·∫•y
 *     responses:
 *       200:
 *         description: Tr·∫£ v·ªÅ k·∫øt qu·∫£ b√†i thi theo ID
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ b√†i thi
 */
router.get("/:id", ExamResultController.getExamResultById);

/**
 * @swagger
 * /api/exam-results/user/{user_id}:
 *   get:
 *     summary: L·∫•y danh s√°ch k·∫øt qu·∫£ b√†i thi theo User ID
 *     tags: [ExamResults]
 *     parameters:
 *       - in: path
 *         name: user_id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID c·ªßa ng∆∞·ªùi d√πng c·∫ßn l·∫•y k·∫øt qu·∫£ b√†i thi
 *     responses:
 *       200:
 *         description: Tr·∫£ v·ªÅ danh s√°ch k·∫øt qu·∫£ b√†i thi c·ªßa ng∆∞·ªùi d√πng
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ b√†i thi n√†o cho ng∆∞·ªùi d√πng n√†y
 */
router.get("/user/:user_id", ExamResultController.getExamResultsByUserId);

/**
 * @swagger
 * /api/exam-results/details/{id}:
 *   get:
 *     summary: L·∫•y chi ti·∫øt k·∫øt qu·∫£ b√†i thi (bao g·ªìm th√¥ng tin user & b√†i thi)
 *     tags: [ExamResults]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID c·ªßa k·∫øt qu·∫£ b√†i thi c·∫ßn l·∫•y
 *     responses:
 *       200:
 *         description: Tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt k·∫øt qu·∫£ b√†i thi
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ b√†i thi
 */
router.get("/details/:id", ExamResultController.getExamResultWithDetails);

/**
 * @swagger
 * /api/exam-results:
 *   post:
 *     summary: Th√™m k·∫øt qu·∫£ b√†i thi m·ªõi
 *     tags: [ExamResults]
 *     security:
 *       - BearerAuth: []  # üîê Y√™u c·∫ßu Bearer Token
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               user_id:
 *                 type: integer
 *                 example: 1
 *               exam_id:
 *                 type: integer
 *                 example: 3
 *               score:
 *                 type: number
 *                 example: 850.5
 *               correct_answers:
 *                 type: integer
 *                 example: 170
 *               incorrect_answers:
 *                 type: integer
 *                 example: 30
 *               unanswered_questions:
 *                 type: integer
 *                 example: 0
 *               total_questions:
 *                 type: integer
 *                 example: 200
 *               completion_time:
 *                 type: integer
 *                 example: 45
 *     responses:
 *       201:
 *         description: K·∫øt qu·∫£ b√†i thi ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng
 *       400:
 *         description: D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá
 *       401:
 *         description: Ch∆∞a ƒëƒÉng nh·∫≠p (Missing JWT Token)
 */
router.post("/", verifyToken, ExamResultController.createExamResult);

/**
 * @swagger
 * /api/exam-results/submit:
 *   post:
 *     summary: N·ªôp b√†i thi & t√≠nh k·∫øt qu·∫£
 *     tags: [ExamResults]
 *     security:
 *       - BearerAuth: []  # üîê Y√™u c·∫ßu Bearer Token
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - exam_id
 *               - answers
 *               - completed_time
 *             properties:
 *               exam_id:
 *                 type: integer
 *                 example: 1  # Example exam_id
 *               completed_time:
 *                 type: integer
 *                 description: "Th·ªùi gian ho√†n th√†nh b√†i thi (t√≠nh b·∫±ng ph√∫t)"
 *                 example: 45  # Example completed_time
 *               answers:
 *                 type: array
 *                 description: "Danh s√°ch c√¢u tr·∫£ l·ªùi c·ªßa ng∆∞·ªùi d√πng"
 *                 items:
 *                   type: object
 *                   properties:
 *                     question_id:
 *                       type: integer
 *                       description: "ID c·ªßa c√¢u h·ªèi"
 *                       example: 1  # Example question_id
 *                     selected_answer:
 *                       type: string
 *                       description: "ƒê√°p √°n do ng∆∞·ªùi d√πng ch·ªçn (A, B, C, D ho·∫∑c null n·∫øu kh√¥ng l√†m)"
 *                       example: "A"  # Example selected_answer
 *             example:
 *               exam_id: 1
 *               completed_time: 45
 *               answers:
 *                 - question_id: 1
 *                   selected_answer: "A"
 *                 - question_id: 2
 *                   selected_answer: "B"
 *                 - question_id: 3
 *                   selected_answer: "C"
 *                 - question_id: 4
 *                   selected_answer: "A"
 *                 - question_id: 5
 *                   selected_answer: "D"
 *                 - question_id: 6
 *                   selected_answer: "A"
 *                 - question_id: 7
 *                   selected_answer: "B"
 *                 - question_id: 8
 *                   selected_answer: "C"
 *                 - question_id: 9
 *                   selected_answer: "A"
 *                 - question_id: 10
 *                   selected_answer: "D"
 *                 - question_id: 11
 *                   selected_answer: "A"
 *                 - question_id: 12
 *                   selected_answer: "B"
 *     responses:
 *       200:
 *         description: B√†i thi ƒë√£ ƒë∆∞·ª£c n·ªôp th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "B√†i thi ƒë√£ ƒë∆∞·ª£c n·ªôp th√†nh c√¥ng!"
 *                 correct_answers:
 *                   type: integer
 *                   description: "S·ªë c√¢u tr·∫£ l·ªùi ƒë√∫ng"
 *                   example: 75
 *                 wrong_answers:
 *                   type: integer
 *                   description: "S·ªë c√¢u tr·∫£ l·ªùi sai"
 *                   example: 25
 *                 unanswered_questions:
 *                   type: integer
 *                   description: "S·ªë c√¢u kh√¥ng l√†m"
 *                   example: 0
 *                 total_score:
 *                   type: integer
 *                   description: "ƒêi·ªÉm t·ªïng (TOEIC scale)"
 *                   example: 850
 *                 completed_time:
 *                   type: integer
 *                   description: "Th·ªùi gian ho√†n th√†nh b√†i thi"
 *                   example: 45
 *       400:
 *         description: D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá (thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc ho·∫∑c format sai)
 *       401:
 *         description: Ch∆∞a ƒëƒÉng nh·∫≠p (Missing JWT Token)
 *       403:
 *         description: Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn n·ªôp b√†i thi n√†y
 *       500:
 *         description: L·ªói h·ªá th·ªëng khi x·ª≠ l√Ω b√†i thi
 */

router.post("/submit", verifyToken, ExamResultController.submitExamAnswers);


/**
 * @swagger
 * /api/exam-results/{id}:
 *   delete:
 *     summary: X√≥a k·∫øt qu·∫£ b√†i thi theo ID
 *     tags: [ExamResults]
 *     security:
 *       - BearerAuth: []  # üîê Y√™u c·∫ßu Bearer Token
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID c·ªßa k·∫øt qu·∫£ b√†i thi c·∫ßn x√≥a
 *     responses:
 *       200:
 *         description: K·∫øt qu·∫£ b√†i thi ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ b√†i thi
 */
router.delete("/:id", verifyToken, ExamResultController.deleteExamResult);


/**
 * @swagger
 * /api/exam-results/stats/daily-attempts:
 *   get:
 *     summary: Th·ªëng k√™ s·ªë l∆∞·ª£t thi m·ªói ng√†y trong th√°ng
 *     tags: [ExamResults]
 *     responses:
 *       200:
 *         description: Tr·∫£ v·ªÅ danh s√°ch l∆∞·ª£t thi theo t·ª´ng ng√†y
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
 *                 properties:
 *                   date:
 *                     type: string
 *                     format: date
 *                     example: 2025-03-01
 *                   count:
 *                     type: integer
 *                     example: 5
 */
router.get("/stats/daily-attempts", ExamResultController.getDailyExamAttempts);

/**
 * @swagger
 * /api/exam-results/stats/avg-score-last-7-days:   
 *   get:
 *     summary: Th·ªëng k√™ ƒëi·ªÉm trung b√¨nh trong 7 ng√†y g·∫ßn ƒë√¢y
 *     tags: [ExamResults]
 *     responses:
 *       200:
 *         description: Tr·∫£ v·ªÅ ƒëi·ªÉm trung b√¨nh trong 7 ng√†y g·∫ßn ƒë√¢y
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
 *                 properties:
 *                  avg_score:
 *                    type: number
 */
router.get("/stats/avg-score-last-7-days", ExamResultController.getAverageScoreLast7Days);

module.exports = router;
