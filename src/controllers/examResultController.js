const ExamResultService = require("../services/examResultService");
const { successResponse, createdResponse, notFoundResponse, serverErrorResponse, badRequestResponse } = require("../utils/responseHelper");

const ExamResultController = {
    // üü¢ L·∫•y t·∫•t c·∫£ k·∫øt qu·∫£ b√†i thi
    async getAllExamResults(req, res) {
        try {
            const results = await ExamResultService.getAllExamResults();
            return successResponse(res, "L·∫•y danh s√°ch k·∫øt qu·∫£ b√†i thi th√†nh c√¥ng", results);
        } catch (error) {
            return serverErrorResponse(res, "L·ªói h·ªá th·ªëng khi l·∫•y k·∫øt qu·∫£ b√†i thi");
        }
    },

    // üü¢ L·∫•y k·∫øt qu·∫£ b√†i thi theo ID
    async getExamResultById(req, res) {
        try {
            const { id } = req.params;
            const result = await ExamResultService.getExamResultById(Number(id));
            if (!result) return notFoundResponse(res, "Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ b√†i thi");

            return successResponse(res, "L·∫•y k·∫øt qu·∫£ b√†i thi th√†nh c√¥ng", result);
        } catch (error) {
            return serverErrorResponse(res, "L·ªói khi l·∫•y k·∫øt qu·∫£ b√†i thi");
        }
    },

    // üü¢ L·∫•y t·∫•t c·∫£ k·∫øt qu·∫£ c·ªßa m·ªôt user
    async getExamResultsByUserId(req, res) {
        try {
            const { user_id } = req.params;
            const results = await ExamResultService.getExamResultsByUserId(Number(user_id));
            return successResponse(res, "L·∫•y danh s√°ch k·∫øt qu·∫£ b√†i thi c·ªßa user th√†nh c√¥ng", results);
        } catch (error) {
            return serverErrorResponse(res, "L·ªói khi l·∫•y k·∫øt qu·∫£ b√†i thi c·ªßa user");
        }
    },

    // üü¢ L·∫•y chi ti·∫øt k·∫øt qu·∫£ b√†i thi (bao g·ªìm th√¥ng tin user v√† b√†i thi)
    async getExamResultWithDetails(req, res) {
        try {
            const { id } = req.params;
            const result = await ExamResultService.getExamResultWithDetails(Number(id));

            if (!result) return notFoundResponse(res, "Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ b√†i thi");

            return successResponse(res, "L·∫•y chi ti·∫øt k·∫øt qu·∫£ b√†i thi th√†nh c√¥ng", result);
        } catch (error) {
            return serverErrorResponse(res, "L·ªói khi l·∫•y chi ti·∫øt k·∫øt qu·∫£ b√†i thi");
        }
    },

    // üü¢ T·∫°o k·∫øt qu·∫£ b√†i thi
    async createExamResult(req, res) {
        try {
            const newResult = await ExamResultService.createExamResult(req.body);
            return createdResponse(res, "K·∫øt qu·∫£ b√†i thi ƒë√£ ƒë∆∞·ª£c l∆∞u", newResult);
        } catch (error) {
            return serverErrorResponse(res, "L·ªói khi l∆∞u k·∫øt qu·∫£ b√†i thi");
        }
    },

    // üü¢ C·∫≠p nh·∫≠t k·∫øt qu·∫£ b√†i thi
    async updateExamResult(req, res) {
        try {
            const { id } = req.params;
            const updatedResult = await ExamResultService.updateExamResult(id, req.body);

            if (!updatedResult) {
                return notFoundResponse(res, "Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ b√†i thi");
            }

            return successResponse(res, "C·∫≠p nh·∫≠t k·∫øt qu·∫£ b√†i thi th√†nh c√¥ng", updatedResult);
        } catch (error) {
            return serverErrorResponse(res, "L·ªói h·ªá th·ªëng khi c·∫≠p nh·∫≠t b√†i thi");
        }
    },

    // üü¢ N·ªôp b√†i thi v√† t√≠nh to√°n k·∫øt qu·∫£
    async submitExamAnswers(req, res) {
        try {
            // üîπ L·∫•y user_id t·ª´ token ƒë√£ x√°c th·ª±c
            const user_id = req.user.userId;

            // üîπ L·∫•y d·ªØ li·ªáu t·ª´ request body
            const { exam_id, answers, completed_time } = req.body;

            // üîπ Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
            if (!exam_id || !answers || !Array.isArray(answers)) {
                return badRequestResponse(res, "D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá! C·∫ßn exam_id, danh s√°ch c√¢u tr·∫£ l·ªùi.");
            }

            // üîπ G·ªçi service ƒë·ªÉ x·ª≠ l√Ω k·∫øt qu·∫£ b√†i thi
            const result = await ExamResultService.submitExamAnswers(user_id, exam_id, answers, completed_time);

            return successResponse(res, "B√†i thi ƒë√£ ƒë∆∞·ª£c n·ªôp th√†nh c√¥ng!", result);
        } catch (error) {
            return serverErrorResponse(res, "L·ªói h·ªá th·ªëng khi n·ªôp b√†i thi!");
        }
    },

    // üü¢ X√≥a k·∫øt qu·∫£ b√†i thi
    async deleteExamResult(req, res) {
        try {
            const { id } = req.params;
            const deleted = await ExamResultService.deleteExamResult(Number(id));
            if (!deleted) return notFoundResponse(res, "Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ b√†i thi");

            return successResponse(res, "K·∫øt qu·∫£ b√†i thi ƒë√£ ƒë∆∞·ª£c x√≥a", deleted);
        } catch (error) {
            return serverErrorResponse(res, "L·ªói khi x√≥a k·∫øt qu·∫£ b√†i thi");
        }
    },
    // üü¢ Th·ªëng k√™ s·ªë l·∫ßn l√†m b√†i trong th√°ng
    async getDailyExamAttempts(req, res) {
        try {
            const data = await ExamResultService.getDailyExamAttempts();
            return successResponse(res, "S·ªë l∆∞·ª£t thi m·ªói ng√†y trong th√°ng", data);
        } catch (error) {
            return serverErrorResponse(res, "L·ªói khi th·ªëng k√™ s·ªë l∆∞·ª£t thi m·ªói ng√†y");
        }
    },
    // üü¢ Th·ªëng k√™ ƒëi·ªÉm trung b√¨nh trong tu·∫ßn
    async getAverageScoreLast7Days(req, res) {
        try {
            const avgScore = await ExamResultService.getAverageScoreLast7Days();
            return successResponse(
                res,
                "ƒêi·ªÉm trung b√¨nh trong 7 ng√†y g·∫ßn ƒë√¢y",
                avgScore
            );
        } catch (error) {
            return serverErrorResponse(res, "L·ªói khi l·∫•y ƒëi·ªÉm trung b√¨nh trong 7 ng√†y g·∫ßn ƒë√¢y");
        }
    }




};

module.exports = ExamResultController;
