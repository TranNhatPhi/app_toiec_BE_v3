const QuestionService = require("../services/questionService");
const fs = require("fs");
const path = require("path");
const {
    successResponse,
    createdResponse,
    notFoundResponse,
    serverErrorResponse
} = require("../utils/responseHelper");

const QuestionController = {
    // üü¢ L·∫•y danh s√°ch t·∫•t c·∫£ c√¢u h·ªèi
    async getAllQuestions(req, res) {
        try {
            const questions = await QuestionService.getAllQuestions();
            return successResponse(res, "L·∫•y danh s√°ch c√¢u h·ªèi th√†nh c√¥ng", questions);
        } catch (error) {
            return serverErrorResponse(res, "L·ªói h·ªá th·ªëng");
        }
    },
    async getTotalQuestionCount(req, res) {
        try {
            const count = await QuestionService.getAllCountQuestion();
            return successResponse(res, "T·ªïng s·ªë c√¢u h·ªèi", count);

        } catch (error) {
            return serverErrorResponse(res, "L·ªói khi ƒë·∫øm t·ªïng s·ªë c√¢u h·ªèi");
        }
    },

    // üü¢ L·∫•y c√¢u h·ªèi theo ID
    async getQuestionById(req, res) {
        try {
            const { id } = req.params;
            const question = await QuestionService.getQuestionById(Number(id));
            if (!question) return notFoundResponse(res, "C√¢u h·ªèi kh√¥ng t·ªìn t·∫°i");

            return successResponse(res, "L·∫•y c√¢u h·ªèi th√†nh c√¥ng", question);
        } catch (error) {
            return serverErrorResponse(res, "L·ªói h·ªá th·ªëng", error);
        }
    },

    // üü¢ L·∫•y c√¢u h·ªèi theo `part_id`
    async getQuestionsByPart(req, res) {
        try {
            const { part_id } = req.params;
            const questions = await QuestionService.getQuestionsByPart(Number(part_id));
            if (!questions || questions.length === 0) return notFoundResponse(res, "Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi");

            return successResponse(res, "L·∫•y danh s√°ch c√¢u h·ªèi th√†nh c√¥ng", questions);
        } catch (error) {
            return serverErrorResponse(res, "L·ªói h·ªá th·ªëng");
        }
    },



    // üü¢ T·∫°o c√¢u h·ªèi m·ªõi
    async createQuestion(req, res) {
        try {
            const newQuestion = await QuestionService.createQuestion(req.body);
            return createdResponse(res, "C√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c t·∫°o", newQuestion);
        } catch (error) {
            return serverErrorResponse(res, "L·ªói khi t·∫°o c√¢u h·ªèi", error);
        }
    },

    // üü¢ C·∫≠p nh·∫≠t c√¢u h·ªèi theo ID
    async updateQuestion(req, res) {
        try {
            const { id } = req.params;
            const updatedQuestion = await QuestionService.updateQuestion(Number(id), req.body);
            if (!updatedQuestion) return notFoundResponse(res, "C√¢u h·ªèi kh√¥ng t·ªìn t·∫°i");

            return successResponse(res, "C√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t", updatedQuestion);
        } catch (error) {
            return serverErrorResponse(res, "L·ªói khi c·∫≠p nh·∫≠t c√¢u h·ªèi");
        }
    },

    // üî¥ X√≥a c√¢u h·ªèi theo ID
    async deleteQuestion(req, res) {
        try {
            const { id } = req.params;
            const deletedQuestion = await QuestionService.deleteQuestion(Number(id));
            if (!deletedQuestion) return notFoundResponse(res, "C√¢u h·ªèi kh√¥ng t·ªìn t·∫°i");

            return successResponse(res, "C√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c x√≥a", deletedQuestion);
        } catch (error) {
            return serverErrorResponse(res, "L·ªói khi x√≥a c√¢u h·ªèi");
        }
    },

    // üü¢ Upload ·∫£nh cho c√¢u h·ªèi
    async uploadQuestionImage(req, res) {
        try {
            const { id } = req.params;
            if (!req.file) return res.status(400).json({ error: "Vui l√≤ng ch·ªçn ·∫£nh!" });

            const updatedQuestion = await QuestionService.updateQuestionImage(Number(id), req.file.filename);
            if (!updatedQuestion) return notFoundResponse(res, "C√¢u h·ªèi kh√¥ng t·ªìn t·∫°i");

            return successResponse(res, "·∫¢nh ƒë√£ ƒë∆∞·ª£c upload th√†nh c√¥ng", updatedQuestion);
        } catch (error) {
            return serverErrorResponse(res, "L·ªói khi upload ·∫£nh");
        }
    },

    // üî¥ X√≥a ·∫£nh c√¢u h·ªèi
    async removeQuestionImage(req, res) {
        try {
            const { id } = req.params;
            const question = await QuestionService.getQuestionById(Number(id));
            if (!question || !question.image_filename) return notFoundResponse(res, "Kh√¥ng c√≥ ·∫£nh ƒë·ªÉ x√≥a");

            // X√≥a file ·∫£nh
            const imagePath = path.join("uploads/questions", question.image_filename);
            if (fs.existsSync(imagePath)) fs.unlinkSync(imagePath);

            // C·∫≠p nh·∫≠t DB
            await QuestionService.updateQuestionImage(Number(id), null);
            return successResponse(res, "·∫¢nh ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng");
        } catch (error) {
            return serverErrorResponse(res, "L·ªói khi x√≥a ·∫£nh");
        }
    }
};

module.exports = QuestionController;
