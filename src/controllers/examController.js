const ExamService = require("../services/examService");
const {
    successResponse,
    createdResponse,
    acceptedResponse,
    notFoundResponse,
    serverErrorResponse
} = require("../utils/responseHelper");

const ExamController = {
    // üü¢ L·∫•y danh s√°ch t·∫•t c·∫£ c√°c b√†i thi
    async getAllExams(req, res) {
        try {
            const exams = await ExamService.getAllExams();
            return successResponse(res, "L·∫•y danh s√°ch b√†i thi th√†nh c√¥ng", exams);
        } catch (error) {
            return serverErrorResponse(res, "L·ªói h·ªá th·ªëng");
        }
    },

    // üü¢ L·∫•y b√†i thi theo ID
    async getExamById(req, res) {
        try {
            const { id } = req.params;
            const exam = await ExamService.getExamById(Number(id));
            if (!exam) return notFoundResponse(res, "B√†i thi kh√¥ng t·ªìn t·∫°i");

            return successResponse(res, "L·∫•y b√†i thi th√†nh c√¥ng", exam);
        } catch (error) {
            return serverErrorResponse(res, "L·ªói h·ªá th·ªëng", error);
        }
    },

    // üü¢ L·∫•y danh s√°ch c√¢u h·ªèi c·ªßa b√†i thi v·ªõi ph·∫ßn v√† c√¢u h·ªèi
    // async getExamQuestions(req, res) {
    //     try {
    //         const { id } = req.params;
    //         const examQuestions = await ExamService.getExamQuestionsByExamId(Number(id));

    //         if (!examQuestions) {
    //             return notFoundResponse(res, "B√†i thi kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng c√≥ c√¢u h·ªèi");
    //         }

    //         return successResponse(res, "L·∫•y danh s√°ch c√¢u h·ªèi th√†nh c√¥ng", examQuestions);
    //     } catch (error) {
    //         return serverErrorResponse(res, "L·ªói h·ªá th·ªëng", error);
    //     }
    // },

    async getExamQuestions(req, res) {
        try {
            const { id } = req.params;
            const isTimeExpired = req.query.expired === "true"; // ?expired=true

            const examQuestions = await ExamService.getExamQuestionsByExamId(Number(id), isTimeExpired);

            return successResponse(res, "L·∫•y danh s√°ch c√¢u h·ªèi th√†nh c√¥ng", examQuestions);
        } catch (error) {
            return serverErrorResponse(res, "L·ªói h·ªá th·ªëng", error);
        }
    },

    async getExamQuestions1(req, res) {
        try {
            const { id } = req.params;  // L·∫•y ID b√†i thi t·ª´ params
            const { page } = req.query;     // L·∫•y s·ªë trang t·ª´ query params

            console.log("üü¢ DEBUG: examId =", id, "page =", page); // Log ki·ªÉm tra

            // Ki·ªÉm tra xem `examId` c√≥ h·ª£p l·ªá kh√¥ng
            if (!id || isNaN(Number(id))) {
                return badRequestResponse(res, "ID b√†i thi kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu!");
            }

            // Ki·ªÉm tra n·∫øu `page` kh√¥ng h·ª£p l·ªá th√¨ m·∫∑c ƒë·ªãnh l√† 1
            const currentPage = page && !isNaN(Number(page)) ? Number(page) : 1;

            // G·ªçi Service ƒë·ªÉ l·∫•y c√¢u h·ªèi theo `examId` v√† `page`
            const examData = await ExamService.getExamQuestionsByExamId1(Number(id), currentPage);

            return successResponse(res, "L·∫•y danh s√°ch c√¢u h·ªèi th√†nh c√¥ng", examData);
        } catch (error) {
            console.error("‚ùå L·ªói khi l·∫•y danh s√°ch c√¢u h·ªèi:", error);
            return serverErrorResponse(res, "L·ªói h·ªá th·ªëng", error);
        }
    },

    // üü¢ T·∫°o b√†i thi m·ªõi
    async createExam(req, res) {
        try {
            const newExam = await ExamService.createExam(req.body);
            return createdResponse(res, "B√†i thi ƒë√£ ƒë∆∞·ª£c t·∫°o", newExam);
        } catch (error) {
            return serverErrorResponse(res, "L·ªói khi t·∫°o b√†i thi", error);
        }
    },

    // üü¢ C·∫≠p nh·∫≠t b√†i thi theo ID
    async updateExam(req, res) {
        try {
            const { id } = req.params;
            const updatedExam = await ExamService.updateExam(Number(id), req.body);
            if (!updatedExam) return notFoundResponse(res, "B√†i thi kh√¥ng t·ªìn t·∫°i");

            return successResponse(res, "B√†i thi ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t", updatedExam);
        } catch (error) {
            return serverErrorResponse(res, "L·ªói khi c·∫≠p nh·∫≠t b√†i thi");
        }
    },

    // üî¥ X√≥a b√†i thi theo ID
    async deleteExam(req, res) {
        try {
            const { id } = req.params;
            const deletedExam = await ExamService.deleteExam(Number(id));
            if (!deletedExam) return notFoundResponse(res, "B√†i thi kh√¥ng t·ªìn t·∫°i");

            return successResponse(res, "B√†i thi ƒë√£ ƒë∆∞·ª£c x√≥a", deletedExam);
        } catch (error) {
            return serverErrorResponse(res, "L·ªói khi x√≥a b√†i thi");
        }
    },

    // üîÑ X·ª≠ l√Ω b·∫•t ƒë·ªìng b·ªô (t√≠nh nƒÉng m·ªü r·ªông)
    async processExamData(req, res) {
        try {
            const processId = await ExamService.processExam(req.body);
            return acceptedResponse(res, "Y√™u c·∫ßu ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω", { processId });
        } catch (error) {
            return serverErrorResponse(res, "L·ªói khi x·ª≠ l√Ω y√™u c·∫ßu");
        }
    }
};

module.exports = ExamController;
